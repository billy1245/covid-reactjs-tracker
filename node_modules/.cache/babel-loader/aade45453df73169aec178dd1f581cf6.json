{"ast":null,"code":"var _jsxFileName = \"/Users/clicky/Desktop/html+css/covid-tracker/src/components/LineChart.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction LineChart({\n  chartDays\n}) {\n  console.log(chartDays);\n\n  if (chartDays.cases) {\n    const data = {\n      labels: Object.keys(chartDays.cases),\n      datasets: [{\n        label: '# of cases',\n        data: Object.values(chartDays === null || chartDays === void 0 ? void 0 : chartDays.cases),\n        fill: false,\n        backgroundColor: 'rgb(255, 99, 132)',\n        borderColor: 'rgba(255, 99, 132, 0.2)'\n      }, {\n        label: '# of deaths',\n        data: Object.values(chartDays.deaths),\n        fill: false,\n        backgroundColor: 'red',\n        borderColor: 'red'\n      }, {\n        label: '# of recovered',\n        data: Object.values(chartDays.recovered),\n        fill: false,\n        backgroundColor: 'green',\n        borderColor: 'green'\n      }]\n    };\n  } else {\n    const data = {\n      labels: Object.keys(chartDays),\n      datasets: [{\n        label: '# of vaccin',\n        data: Object.values(chartDays),\n        fill: false,\n        backgroundColor: 'rgb(255, 99, 132)',\n        borderColor: 'rgba(255, 99, 132, 0.2)'\n      }]\n    };\n  }\n\n  const options = {\n    scales: {\n      yAxes: [{\n        ticks: {\n          beginAtZero: true\n        }\n      }]\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_c = LineChart;\nexport default LineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"sources":["/Users/clicky/Desktop/html+css/covid-tracker/src/components/LineChart.js"],"names":["React","Line","LineChart","chartDays","console","log","cases","data","labels","Object","keys","datasets","label","values","fill","backgroundColor","borderColor","deaths","recovered","options","scales","yAxes","ticks","beginAtZero"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,iBAArB;;;;AAGA,SAASC,SAAT,CAAmB;AAACC,EAAAA;AAAD,CAAnB,EAAgC;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;;AACA,MAAGA,SAAS,CAACG,KAAb,EAAmB;AACf,UAAMC,IAAI,GAAG;AACTC,MAAAA,MAAM,EAAEC,MAAM,CAACC,IAAP,CAAYP,SAAS,CAACG,KAAtB,CADC;AAETK,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,KAAK,EAAE,YADT;AAEEL,QAAAA,IAAI,EAAEE,MAAM,CAACI,MAAP,CAAcV,SAAd,aAAcA,SAAd,uBAAcA,SAAS,CAAEG,KAAzB,CAFR;AAGEQ,QAAAA,IAAI,EAAE,KAHR;AAIEC,QAAAA,eAAe,EAAE,mBAJnB;AAKEC,QAAAA,WAAW,EAAE;AALf,OADQ,EAQR;AACEJ,QAAAA,KAAK,EAAE,aADT;AAEEL,QAAAA,IAAI,EAAEE,MAAM,CAACI,MAAP,CAAcV,SAAS,CAACc,MAAxB,CAFR;AAGEH,QAAAA,IAAI,EAAE,KAHR;AAIEC,QAAAA,eAAe,EAAE,KAJnB;AAKEC,QAAAA,WAAW,EAAE;AALf,OARQ,EAeR;AACEJ,QAAAA,KAAK,EAAE,gBADT;AAEEL,QAAAA,IAAI,EAAEE,MAAM,CAACI,MAAP,CAAcV,SAAS,CAACe,SAAxB,CAFR;AAGEJ,QAAAA,IAAI,EAAE,KAHR;AAIEC,QAAAA,eAAe,EAAE,OAJnB;AAKEC,QAAAA,WAAW,EAAE;AALf,OAfQ;AAFD,KAAb;AA2BH,GA5BD,MA4BK;AACD,UAAMT,IAAI,GAAG;AACTC,MAAAA,MAAM,EAAEC,MAAM,CAACC,IAAP,CAAYP,SAAZ,CADC;AAETQ,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,KAAK,EAAE,aADT;AAEEL,QAAAA,IAAI,EAAEE,MAAM,CAACI,MAAP,CAAcV,SAAd,CAFR;AAGEW,QAAAA,IAAI,EAAE,KAHR;AAIEC,QAAAA,eAAe,EAAE,mBAJnB;AAKEC,QAAAA,WAAW,EAAE;AALf,OADQ;AAFD,KAAb;AAcH;;AAEC,QAAMG,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,KAAK,EAAE;AACLC,UAAAA,WAAW,EAAE;AADR;AADT,OADK;AADD;AADM,GAAhB;AAYA,sBAEE;AAAA,2BAEJ,QAAC,IAAD;AAAM,MAAA,IAAI,EAAEhB,IAAZ;AAAkB,MAAA,OAAO,EAAEY;AAA3B;AAAA;AAAA;AAAA;AAAA;AAFI,mBAFF;AAQL;;KAnEQjB,S;AAsET,eAAeA,SAAf","sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\n\n\nfunction LineChart({chartDays}) {\n    console.log(chartDays)\n    if(chartDays.cases){\n        const data = {\n            labels: Object.keys(chartDays.cases),\n            datasets: [\n              {\n                label: '# of cases',\n                data: Object.values(chartDays?.cases),\n                fill: false,\n                backgroundColor: 'rgb(255, 99, 132)',\n                borderColor: 'rgba(255, 99, 132, 0.2)',\n              },\n              {\n                label: '# of deaths',\n                data: Object.values(chartDays.deaths),\n                fill: false,\n                backgroundColor: 'red',\n                borderColor: 'red',\n              },\n              {\n                label: '# of recovered',\n                data: Object.values(chartDays.recovered),\n                fill: false,\n                backgroundColor: 'green',\n                borderColor: 'green',\n              },\n            ],\n            \n          };\n    }else{\n        const data = {\n            labels: Object.keys(chartDays),\n            datasets: [\n              {\n                label: '# of vaccin',\n                data: Object.values(chartDays),\n                fill: false,\n                backgroundColor: 'rgb(255, 99, 132)',\n                borderColor: 'rgba(255, 99, 132, 0.2)',\n              },\n             \n            ],\n            \n          };\n    }\n      \n      const options = {\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n              },\n            },\n          ],\n        },\n      };\n\n      return(\n\n        <>\n    \n    <Line data={data} options={options} />\n  </>\n      )\n\n}\n  \n\nexport default LineChart;"]},"metadata":{},"sourceType":"module"}