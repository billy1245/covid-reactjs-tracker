{"ast":null,"code":"var _jsxFileName = \"/Users/clicky/Desktop/html+css/covid-tracker/src/components/LineChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction LineChart() {\n  _s();\n\n  const [chartDays, setChartDays] = useState([]);\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/historical/all\").then(response => response.json()).then(response => {\n      setChartDays(response);\n    });\n  }, []);\n  const data = {\n    labels: Object.keys(chartDays.cases),\n    datasets: [{\n      label: '# of cases',\n      data: Object.values(chartDays.cases),\n      fill: false,\n      backgroundColor: 'rgb(255, 99, 132)',\n      borderColor: 'rgba(255, 99, 132, 0.2)'\n    }, {\n      label: '# of deaths',\n      data: Object.values(chartDays.deaths),\n      fill: false,\n      backgroundColor: 'red',\n      borderColor: 'red'\n    }, {\n      label: '# of recovered',\n      data: Object.values(chartDays.recovered),\n      fill: false,\n      backgroundColor: 'green',\n      borderColor: 'green'\n    }]\n  };\n  const options = {\n    scales: {\n      yAxes: [{\n        ticks: {\n          beginAtZero: true\n        }\n      }]\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(LineChart, \"YjwlJ+HGoXrzWRrM3eqgwRJESRU=\");\n\n_c = LineChart;\nexport default LineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"sources":["/Users/clicky/Desktop/html+css/covid-tracker/src/components/LineChart.js"],"names":["React","useEffect","useState","Line","LineChart","chartDays","setChartDays","fetch","then","response","json","data","labels","Object","keys","cases","datasets","label","values","fill","backgroundColor","borderColor","deaths","recovered","options","scales","yAxes","ticks","beginAtZero"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,iBAArB;;;;AAGA,SAASC,SAAT,GAAqB;AAAA;;AACjB,QAAM,CAACC,SAAD,EAAaC,YAAb,IAA6BJ,QAAQ,CAAC,EAAD,CAA3C;AACAD,EAAAA,SAAS,CAAC,MAAM;AAEZM,IAAAA,KAAK,CAAC,+CAAD,CAAL,CAAuDC,IAAvD,CAA6DC,QAAD,IAAaA,QAAQ,CAACC,IAAT,EAAzE,EAA0FF,IAA1F,CAAgGC,QAAD,IAAY;AAEzGH,MAAAA,YAAY,CAACG,QAAD,CAAZ;AACF,KAHA;AAKD,GAPM,EAOL,EAPK,CAAT;AASA,QAAME,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAEC,MAAM,CAACC,IAAP,CAAYT,SAAS,CAACU,KAAtB,CADC;AAETC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,YADT;AAEEN,MAAAA,IAAI,EAAEE,MAAM,CAACK,MAAP,CAAcb,SAAS,CAACU,KAAxB,CAFR;AAGEI,MAAAA,IAAI,EAAE,KAHR;AAIEC,MAAAA,eAAe,EAAE,mBAJnB;AAKEC,MAAAA,WAAW,EAAE;AALf,KADQ,EAQR;AACEJ,MAAAA,KAAK,EAAE,aADT;AAEEN,MAAAA,IAAI,EAAEE,MAAM,CAACK,MAAP,CAAcb,SAAS,CAACiB,MAAxB,CAFR;AAGEH,MAAAA,IAAI,EAAE,KAHR;AAIEC,MAAAA,eAAe,EAAE,KAJnB;AAKEC,MAAAA,WAAW,EAAE;AALf,KARQ,EAeR;AACEJ,MAAAA,KAAK,EAAE,gBADT;AAEEN,MAAAA,IAAI,EAAEE,MAAM,CAACK,MAAP,CAAcb,SAAS,CAACkB,SAAxB,CAFR;AAGEJ,MAAAA,IAAI,EAAE,KAHR;AAIEC,MAAAA,eAAe,EAAE,OAJnB;AAKEC,MAAAA,WAAW,EAAE;AALf,KAfQ;AAFD,GAAb;AA4BE,QAAMG,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,KAAK,EAAE;AACLC,UAAAA,WAAW,EAAE;AADR;AADT,OADK;AADD;AADM,GAAhB;AAYA,sBAEE;AAAA,4BACJ;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YADI,eAIJ,QAAC,IAAD;AAAM,MAAA,IAAI,EAAEjB,IAAZ;AAAkB,MAAA,OAAO,EAAEa;AAA3B;AAAA;AAAA;AAAA;AAAA,YAJI;AAAA,kBAFF;AAUL;;GA7DQpB,S;;KAAAA,S;AAgET,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\n\n\nfunction LineChart() {\n    const [chartDays , setChartDays] = useState([])\n    useEffect(() => {\n        \n        fetch(\"https://disease.sh/v3/covid-19/historical/all\").then((response) =>response.json()).then((response)=>{\n          \n          setChartDays(response)\n       })\n    \n      },[])\n\n    const data = {\n        labels: Object.keys(chartDays.cases),\n        datasets: [\n          {\n            label: '# of cases',\n            data: Object.values(chartDays.cases),\n            fill: false,\n            backgroundColor: 'rgb(255, 99, 132)',\n            borderColor: 'rgba(255, 99, 132, 0.2)',\n          },\n          {\n            label: '# of deaths',\n            data: Object.values(chartDays.deaths),\n            fill: false,\n            backgroundColor: 'red',\n            borderColor: 'red',\n          },\n          {\n            label: '# of recovered',\n            data: Object.values(chartDays.recovered),\n            fill: false,\n            backgroundColor: 'green',\n            borderColor: 'green',\n          },\n        ],\n        \n      };\n      \n      const options = {\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n              },\n            },\n          ],\n        },\n      };\n\n      return(\n\n        <>\n    <div className='header'>\n     \n    </div>\n    <Line data={data} options={options} />\n  </>\n      )\n\n}\n  \n\nexport default LineChart;"]},"metadata":{},"sourceType":"module"}